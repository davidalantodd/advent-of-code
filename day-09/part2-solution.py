file = open("data.txt", "r")
file_data = file.read()
moves = file_data.splitlines()

#define starting positions

# print(rope)
print(moves)
# print(H)
# print(T)

# moved_to = [
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
#                 [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."], 
#             ]

#check if T needs to move left
def check_left(H,T):
    if H[1] - T[1] < 0:
        return H,[T[0],T[1]-1]
    else:
        return H, T

#check if T needs to move right
def check_right(H,T):
    if H[1] - T[1] > 0:
        return H,[T[0],T[1]+1]
    else:
        return H, T
   
#check if T needs to move up
def check_up(H,T):
    if H[0] - T[0] < 0:
        return H,[T[0]-1,T[1]]
    else:
        return H, T
    

#check if T needs to move down
def check_down(H,T):
    if H[0] - T[0] > 0:
        return H,[T[0]+1,T[1]]
    else:
        return H, T
    

#check if T needs to move up/right diagonally 
def check_up_right_diag(H,T):
    if H[0] - T[0] < 0:
        return H,[T[0]-1,T[1]+1]
    else:
        return H, T

#check if T needs to move down/right diagonally
def check_down_right_diag(H,T):
    if H[0] - T[0] > 0:
        return H,[T[0]+1,T[1]+1]
    else:
        return H, T

#check if T needs to move up/left diagonally
def check_up_left_diag(H,t):
    if H[0] - T[0] < 0:
        return H,[T[0]-1,T[1]-1]
    else:
        return H, T

#check if T needs to move down/left diagonally
def check_down_left_diag(H,T):
    if H[0] - T[0] > 0:
        return H,[T[0]+1,T[1]-1]
    else:
        return H, T

def make_a_move(rope_positions, rope_visited, H, T, current_knot_H, current_knot_T):
            if current_knot_H == 9:
                if direction == "R":
                    H[1]+=1 #moving head
                elif direction == "L":
                    H[1]-=1
                elif direction == "U":
                    H[0]-=1   
                elif direction == "D":
                    H[0]+=1
            x = H[0] - T[0]
            y = H[1] - T[1]
            # print(x, y)
            print(H, T)
            if ((x == 1 or x == -1) and (y == 1 or y == -1)) or ((x == 0) and (y == 1 or y == -1)) or ((x == 1 or x == -1) and (y == 0)) or ((x == 0) and (y == 0)):
                print('no move')
            else:
                if x < 0:
                    if y > 0:
                        H,T = check_up_right_diag(H, T)
                    elif y < 0:
                        H,T = check_up_left_diag(H, T)
                if x > 0:
                    if y > 0:
                        H,T = check_down_right_diag(H, T)
                    if y < 0:
                        H,T = check_down_left_diag(H, T)
                if x == 0:
                    if y < 0:
                        H,T = check_left(H, T)
                    elif y > 0:
                        H,T = check_right(H, T)
                if y == 0:
                    if x < 0:
                        H,T = check_up(H, T)
                    elif x > 0:
                        H,T = check_down(H, T)
            rope_visited[current_knot_T]["row"+str(T[0])+"col"+str(T[1])] = len(rope_visited[current_knot_T]) +1
            # if current_knot_T == 0:
            #     moved_to[T[0]][T[1]] = "#"
            rope_positions[current_knot_H] = H
            rope_positions[current_knot_T] = T
            return rope_positions, rope_visited, H, T

# rope_positions = [
#     [4,0],[4,0],[4,0],[4,0],[4,0],[4,0],[4,0],[4,0],[4,0],[4,0]
# ]
rope_positions = [
    [15,11],[15,11],[15,11],[15,11],[15,11],[15,11],[15,11],[15,11],[15,11],[15,11]
]
rope_visited = [
    {},{},{},{},{},{},{},{},{},{}
]

i = len(moves)
for move in moves:
        [direction, count] = move.split(' ')
        # print(move)
        for i in range(int(count)):
            current_knot_H = 9
            current_knot_T = 8
            while current_knot_T >= 0:
                H = rope_positions[current_knot_H]
                T = rope_positions[current_knot_T]
                rope_positions, rope_visited, H, T = make_a_move(rope_positions, rope_visited, H, T, current_knot_H, current_knot_T)
                current_knot_H-=1
                current_knot_T-=1
                # print(rope_positions)
                # print("current H", current_knot_H, "current T", current_knot_T)
            
            # grid = [
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            #     [".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
            # ]
            # print(grid)
            # print(rope_positions)
            # if i <= 1:
            # num = 10
            # for x in rope_positions:
            #     grid[x[0]][x[1]] = str(num)
            #     num-=1
            # for x in grid:
            #     print(x)
        # i+=1


print("head", H, "tail", T)
print(rope_positions)
t = 0
while t < 10:
    print(len(rope_visited[t]))
    t+=1
# for y in rope_visited[0]:
#     print(y)
# for x in moved_to:
#     print(x)
print()
print("solution to part 2: ", len(rope_visited[0]))




